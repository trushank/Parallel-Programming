import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Random;
import java.util.Set;

/**
CliqueGenerator.java
@author Trushank
Date: Oct 19, 2013
 */
public class CliqueGenerator {
public static void main(String args[]){
    
    if(args.length!=2) usage();
    int cliqueSize=5;//Integer.parseInt(args[0]);
    int graphSize=25;//Integer.parseInt(args[1]);
    if(cliqueSize>60) usage();
    long[] graph=new long[graphSize];
    Random r=new Random(1231);
    
    Set<Integer> s=new HashSet<Integer>();
    for(int i=0;i<graph.length;i++){
	graph[i]=0;
    }
    
   while(s.size()<cliqueSize){
       int temp=r.nextInt(graphSize);
	s.add(temp);
    }
   
   
   Iterator<Integer> itr=s.iterator();
   int[] tempClique=new int[s.size()];
   
   for(int i=0;i<tempClique.length && itr.hasNext();i++){
       tempClique[i]=itr.next();
   }
   
   
   int[] nonClique=new int[graph.length-tempClique.length];
   for(int i=0, x=0;i<graph.length;i++){
       if(!s.contains(i)){
	   nonClique[x++]=i;
       }
   }
   
   //Turning on the bit for self
   for(int i=0;i<graph.length;i++){
	   graph[i]=graph[i]|(1L<<i);
   }
   
   //Turning on bits for clique members
   for(int i=0;i<tempClique.length;i++){
       for(int j=0;j<tempClique.length;j++){
	   graph[tempClique[i]] =graph[tempClique[i]] | (1L<<tempClique[j]);
	  
       }
   }
   System.out.println(graph[tempClique[1]]);
   System.out.println(Long.toBinaryString(graph[tempClique[1]]));
   //Turning random bits on representing non cliques
   for(int i=0;i<nonClique.length;i++){
       int a=r.nextInt(graph.length);
       graph[nonClique[i]]= graph[nonClique[i]] | (1L<<a);
       graph[a]=graph[a]|(1L<<nonClique[i]);
   }
 
   
//Writing to a file   
PrintWriter fileOut;
try {
	fileOut = new PrintWriter(new File("..\\MaxCliqueSeq\\graph.txt"));
	for(int i=0;i<graph.length;i++){
		fileOut.println(graph[i]);
		
	}
	fileOut.close();
} catch (FileNotFoundException e) {
	e.printStackTrace();
}

}
public static void usage(){}
}

